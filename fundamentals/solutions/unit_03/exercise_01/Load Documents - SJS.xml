<export><workspace name="Load Documents"><query name="Basic Insert" focus="false" listorder="1" taborder="1" active="true" database="1814532960113569457" server="5274041235097448994" database-name="Documents" server-name="App-Services" mode="javascript" optimize="">/*
 * This shows how to create a document using an in-memory document.
 * Notice the typical data types being used along with the accepted values for each type.
 * It is worth noting that in MarkLogic, even dates have timezones.
 * Click on "Explore" to see the actual values being stored.
 */
'use strict';

declareUpdate();

xdmp.documentInsert(
  '/sample-data-types.json', 
  {
    "string" : "value",
    "decimal" : 3.1416,
    "boolean" : true,
    "date" : xs.date("2021-12-23-07:00"),
    "dateTime" : xs.dateTime("2021-12-23T12:34:47-07:00"),
    "time" : xs.time("12:34:47-07:00"),
    "duration" : xs.dayTimeDuration("P1DT4H4M7S")
  }
)</query><query name="REST - Insert" focus="false" listorder="2" taborder="2" active="true" database="1814532960113569457" server="5274041235097448994" database-name="Documents" server-name="App-Services" mode="javascript" optimize="">/*
 * One could also push content into MarkLogic using the Client REST API.
 * Endpoint: PUT /v1/documents
 * Clients have been implemented for some languages. 
 * Do note that these are community supported libraries.
 *
 * 1. Java: https://developer.marklogic.com/products/java/
 * 2. NodeJS: https://developer.marklogic.com/products/node/
 * 3. PHP: https://developer.marklogic.com/code/mlphp/
 */
'use strict';

xdmp.httpPut(
  'http://localhost:8000/v1/documents' 
    + '?uri=/sample-data-types.json'
  , 
  { 
    authentication : {
      method : 'digest',
      username : 'admin',
      password : 'admin'
    },
    headers: {
      'Content-type': 'application/json',
      Accept: "application/json"
    }
  }, 
  xdmp.toJSON({
    "string" : "value",
    "decimal" : 3.1416,
    "boolean" : true,
    "date" : xs.date("2021-12-23-07:00"),
    "dateTime" : xs.dateTime("2021-12-23T12:34:47-07:00"),
    "time" : xs.time("12:34:47-07:00"),
    "duration" : xs.dayTimeDuration("P1DT4H4M7S")
  })
)</query><query name="REST - Insert Many" focus="false" listorder="3" taborder="3" active="true" database="1814532960113569457" server="5274041235097448994" database-name="Documents" server-name="App-Services" mode="javascript" optimize="">/*
 * One could also push multiple documents in one request.
 * Endpoint: POST /v1/documents
 * Just make sure that you have built your multi-part content properly.
 */
'use strict';

// suppose that you want to push 2 documents at the same time.
let documents = [
  xdmp.toJSON({first: '1'}),
  xdmp.toJSON({second: '2'})
]

// you would need to declare the "manifest" identifying the content-type
// of each item. You can use the "Content-Disposition" to declare the URI
var boundaryString = fn.replace(sem.uuidString(), '-', '')
var manifest = [
  {
    "headers": {
      "Content-Type": "application/json",
      "Content-Disposition": 'filename="/sample/doc1.json"',
      "boundary": boundaryString
    }
  },
  {
    "headers": {
      "Content-Type":"application/json",
      "Content-Disposition": 'filename="/sample/doc2.json"'
    }
  }
];
let data = xdmp.multipartEncode(
   boundaryString,
   manifest,
   documents );

xdmp.httpPost(
  'http://localhost:8000/v1/documents', 
  { 
    authentication : {
      method : 'digest',
      username : 'admin',
      password : 'admin'
    },
    headers: {
      'Content-type': 'multipart/mixed; boundary=' + boundaryString,
      Accept: "application/json"
    }
  }, 
  data
)</query><query name="Loading local data" focus="false" listorder="4" taborder="4" active="true" database="9613134946875500342" server="5274041235097448994" database-name="playground" server-name="App-Services" mode="javascript" optimize="">/*
 * This shows how to load documents from disk. "Disk" here is defined as the
 * local disk of the MarkLogic instance processing the request, and not the 
 * client's local disk.
 * 
 * Click on "Explore" to see the actual content being stored.
 */
'use strict';

declareUpdate();

const pathToDocs = '/home/cent/Desktop/fundamentals/data/star-wars/characters';
const docResults = xdmp.filesystemDirectory(pathToDocs);

docResults.forEach(function(doc) {
  xdmp.documentLoad(
    doc.pathname, 
    {
      uri: '/characters/' + doc.filename,
      collections: ["star-wars", "characters"]
    }
  )
});</query><query name="Extracting binary info" focus="false" listorder="5" taborder="5" active="true" database="9613134946875500342" server="5274041235097448994" database-name="playground" server-name="App-Services" mode="javascript" optimize="">/*
 * This shows how metadata of binaries could be extracted and stored separately.
 * 
 * Click on "Explore" to see the actual content being stored.
 */
'use strict';

declareUpdate();

const pathToDocs = '/home/cent/Desktop/fundamentals/data/star-wars/images';
const docResults = xdmp.filesystemDirectory(pathToDocs);

docResults.forEach(function(doc) {
  xdmp.documentLoad(
    doc.pathname, 
    {
      uri: '/images/' + doc.filename,
      collections: ["star-wars", "images"]
    }
  )
  
  let binary = xdmp.externalBinary(doc.pathname)
  let metadata = xdmp.documentFilter(binary)
  xdmp.documentInsert(
    '/images/' + doc.filename + ".xml",
    metadata
  )
});</query></workspace></export>
