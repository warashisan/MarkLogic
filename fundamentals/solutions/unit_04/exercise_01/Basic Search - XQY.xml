<export><workspace name="Basic Search"><query name="Terms" focus="true" listorder="1" taborder="1" active="true" database="" server="" database-name="Documents" server-name="App-Services" mode="xquery" optimize="">(:
 * This tab highlights how Marklogic identifies terms for a given string.
 :)
xquery version "1.0-ml";

cts:tokenize("Jack the giant-slayer is running towards the castle.")</query><query name="URI Lexicon" focus="false" listorder="2" taborder="2" active="true" database="" server="" database-name="" server-name="" mode="xquery" optimize="">(:
 * This tab shows how the URI lexicon keeps track of 
 * which document contains which word.
 :)
xquery version "1.0-ml";

cts:uris('', (), cts:word-query('accounting'))</query><query name="JSON data type" focus="false" listorder="3" taborder="3" active="true" database="" server="" database-name="" server-name="" mode="xquery" optimize="">(:
 * This tab shows how JSON Documents are data type aware for primitives.
 * This is in contrast to XML Documents where everything is a string.
 :)
xquery version "1.0-ml";

declare function local:get-count(
  $property-name as xs:string, 
  $value as xs:anyAtomicType
){
  fn:count(
    cts:uris('', (), cts:and-query((
      cts:document-query('/sample-data-types.json'),
      cts:json-property-value-query($property-name, $value)
    )))
  )
};

object-node {
  'number will match number' : local:get-count('decimal', 3.1416),
  'number will NOT match string' : local:get-count('decimal', '3.1416'),
  'boolean will match boolean' : local:get-count('boolean', fn:true()),
  'boolean will NOT match string' : local:get-count('boolean', 'true')
}
</query><query name="AND Query" focus="false" listorder="4" taborder="4" active="true" database="" server="" database-name="" server-name="" mode="xquery" optimize="">(:
 * This tab shows how to construct an AND query
 :)
xquery version "1.0-ml";

cts:search(
  /,
  cts:and-query(
    (
      cts:word-query('accounting'),
      cts:json-property-value-query('zip', '64179')
    )
  )
)</query><query name="OR Query" focus="false" listorder="5" taborder="5" active="true" database="" server="" database-name="" server-name="" mode="xquery" optimize="">(:
 * This tab shows how to construct an OR query
 :)
xquery version "1.0-ml";

fn:subsequence(
  cts:search(
    /,
    cts:or-query(
      (
        cts:word-query('accounting'),
        cts:json-property-value-query('zip', '64179')
      )
    )
  )
  ,
  1, 10
)</query><query name="NOT Query" focus="false" listorder="6" taborder="6" active="true" database="" server="" database-name="" server-name="" mode="xquery" optimize="">(:
 * This tab shows how to construct a NOT query
 :)
xquery version "1.0-ml";

fn:subsequence(
  cts:search(
    /,
    cts:not-query(
      cts:word-query('account')
    )
  )
  ,
  1, 10
)</query><query name="Property name query" focus="false" listorder="7" taborder="7" active="true" database="" server="" database-name="" server-name="" mode="xquery" optimize="">(:
 * This tab shows how to use property names for your query.
 :)
xquery version "1.0-ml";

cts:search(
  /,
  cts:json-property-scope-query('decimal', cts:true-query())
)</query><query name="Query 1" focus="false" listorder="8" taborder="8" active="true" database="" server="" database-name="Documents" server-name="App-Services" mode="xquery" optimize="1">(:
 * If all characters on a search are in lower-case, the search will run in
 * `case-insensitive mode` by default. 
 *
 * If the characters on a search are in mixed-case or all upper-case, the
 * search will run in `case-sensitive mode` by default. 
 *
 * Each word query constructor can override this default behavior
 :)
xquery version "1.0-ml";

object-node {
  'case insensitive' : fn:head(cts:search(/, cts:word-query('accounting'))),
  'case sensitive' : fn:head(cts:search(/, cts:word-query('ACCOUNTING'))),
  'override' : fn:head(cts:search(/, cts:word-query('ACCOUNTING', ('case-insensitive'))))
}</query></workspace></export>
