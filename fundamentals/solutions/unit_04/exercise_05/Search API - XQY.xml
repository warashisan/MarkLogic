<export><workspace name="Search API"><query name="Basic Search" focus="true" listorder="1" taborder="1" active="true" database="9283215535039809937" server="5337209431933715057" database-name="Documents" server-name="App-Services" mode="xquery" optimize="1">(:
 * Search is the XQuery-specific library that could be used to implement a
 * google-like services/application. You can use cts.parse to convert your query
 * string into the corresponding cts.query equivalent.
 *
 * Pagination can be implemented using the `slice` function of DocumentSearch.
 :)
xquery version "1.0-ml";

import module namespace search = "http://marklogic.com/appservices/search"
    at "/MarkLogic/appservices/search/search.xqy";

search:search("account* AND new york", (), 0, 2)
</query><query name="Snippets and Facets" focus="false" listorder="2" taborder="3" active="true" database="4693478407245547279" server="10542459897476345829" database-name="star-wars-content" server-name="8100-star-wars" mode="xquery" optimize="1">(:
 * Facets could be generated alongside your document search results. Your query
 * string would apply to both the facets and the document search.
 *
 * Additionally notice how snippets are included as part of the result.
 :)
xquery version "1.0-ml";

import module namespace search = "http://marklogic.com/appservices/search"
    at "/MarkLogic/appservices/search/search.xqy";
import module namespace qbe = "http://marklogic.com/appservices/querybyexample"
     at "/MarkLogic/appservices/search/qbe.xqy";

let $options := &lt;search:options xmlns:search="http://marklogic.com/appservices/search"&gt;
  &lt;search:search-option&gt;unfiltered&lt;/search:search-option&gt;
  &lt;search:constraint name="weapon"&gt;
    &lt;search:range type="xs:string" collation="http://marklogic.com/collation//S1/AS/T00BB" facet="true"&gt;
      &lt;search:json-property&gt;weapon&lt;/search:json-property&gt;
    &lt;/search:range&gt;
  &lt;/search:constraint&gt;
  &lt;search:constraint name="homeworld"&gt;
    &lt;search:range type="xs:string" collation="http://marklogic.com/collation//S1/AS/T00BB" facet="true"&gt;
      &lt;search:json-property&gt;homeworld&lt;/search:json-property&gt;
    &lt;/search:range&gt;
  &lt;/search:constraint&gt;
&lt;/search:options&gt;
let $query := 'weapon:"blaster pistol" OR homeworld:tatooine'
return search:search($query, $options)</query><query name="Search REST API" focus="false" listorder="3" taborder="4" active="true" database="4693478407245547279" server="10542459897476345829" database-name="star-wars-content" server-name="8100-star-wars" mode="xquery" optimize="1">(:
 * A similar library is available out of the box for your REST API App servers.
 *
 * NOTICE: Don't forget to properly encode your input!
 :)
xquery version "1.0-ml";

xdmp:http-get(
  "http://localhost:8100/v1/search?q=" || xdmp:url-encode('tatooine OR naboo'),
  map:map()
    =&gt; map:with(
      'authentication', map:map()
        =&gt; map:with('method', 'digest')
        =&gt; map:with('username', 'star-wars-reader')
        =&gt; map:with('password', 'star-wars-reader')
    )
    =&gt; map:with(
      'headers', map:map()
        =&gt; map:with('accept', 'application/json')
    )
)</query><query name="Facet and Constraints" focus="false" listorder="4" taborder="5" active="true" database="4693478407245547279" server="10542459897476345829" database-name="star-wars-content" server-name="8100-star-wars" mode="xquery" optimize="1">(:
 * Query options are configured and can be used as `options` input.
 * This supports the use of facets and other operators as part of
 * your query string.
 :)
xquery version "1.0-ml";

xdmp:http-get(
  "http://localhost:8100/v1/search"
    || "?options=" || xdmp:url-encode('characters')
    || "&amp;amp;q=" || xdmp:url-encode('weapon:lightsaber OR naboo')
  ,
  map:map()
    =&gt; map:with(
      'authentication', map:map()
        =&gt; map:with('method', 'digest')
        =&gt; map:with('username', 'star-wars-reader')
        =&gt; map:with('password', 'star-wars-reader')
    )
    =&gt; map:with(
      'headers', map:map()
        =&gt; map:with('accept', 'application/json')
    )
)</query><query name="By Example" focus="false" listorder="5" taborder="2" active="true" database="4693478407245547279" server="10542459897476345829" database-name="star-wars-content" server-name="8100-star-wars" mode="xquery" optimize="1">(:
 * QBE library makes use of a provided object and constructs the query 
 * using the properties/elements held within
 :)
xquery version "1.0-ml";

import module namespace search = "http://marklogic.com/appservices/search"
    at "/MarkLogic/appservices/search/search.xqy";
import module namespace qbe = "http://marklogic.com/appservices/querybyexample"
     at "/MarkLogic/appservices/search/qbe.xqy";

let $example := object-node{
  "homeworld": "naboo", 
  "gender": "male"
}
let $query := qbe:by-example($example)
let $options := &lt;options xmlns="http://marklogic.com/appservices/search"&gt;
      &lt;search-option&gt;unfiltered&lt;/search-option&gt;
    &lt;/options&gt;
return search:resolve($query, $options)
</query></workspace></export>
